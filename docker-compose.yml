version: '3'

services:
  drone:
    image: drone/drone:2
    restart: always
    volumes:
    - /var/lib/drone:/data
    environment:
{% for key, value in drone_env.items() %}
    - {{ key }}={{ value }}
{% endfor %}
{% if filter %}
    - DRONE_USER_FILTER={{admin}}{% if filtered_users |length %},{{filtered_users}}{% endif %}{% if filtered_orgs |length %},{{filtered_orgs}}{% endif %}
{% endif %}

    labels:
    - traefik.enable=true
    - trafik.docker.network=web
    - traefik.http.routers.drone.service=drone
    - traefik.http.routers.drone.entryPoints=web
    - traefik.http.routers.drone.rule=Host(`{{ url.split("/")[2] }}`)
    - traefik.http.middlewares.drone-redirect.redirectregex.regex=^https?://{{ url.split("/")[2] }}/(.*)
    - traefik.http.middlewares.drone-redirect.redirectregex.replacement=https://{{ url.split("/")[2] }}/$${1}
    - traefik.http.routers.drone.middlewares=drone-redirect
    - traefik.http.routers.drone-ssl.rule=host(`{{ url.split("/")[2] }}`)
    - traefik.http.routers.drone-ssl.tls.certResolver=leresolver
    - traefik.http.services.drone.loadBalancer.server.port=80
    networks:
    - web
{% if database == "postgres" %}
    - pg_net
{% endif %}

  drone-runner:
    image: drone/drone-runner-docker
    restart: always
    depends_on:
      - drone
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET={{ rpc_pass }}
      - DRONE_RUNNER_CAPACITY=10
    networks:
    - web

{% if database == "postgres" %}
  postgres:
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=drone
      - POSTGRES_USER=drone
      - POSTGRES_PASSWORD=drone
    volumes:
      - "./data/postgres:/var/lib/postgresql/data"
    networks:
      - pg_net
{% endif %}

networks:
  web:
    external: true
{% if database == "postgres" %}
  pg_net:

{% endif %}
