version: '3'

services:
  drone:
    image: drone/drone:2
    restart: always
    volumes:
    - /var/lib/drone:/data
    environment:
{% for key, value in drone_env.items() %}
    - {{ key }}={{ value }}
{% endfor %}
{% if filter %}
    - DRONE_USER_FILTER={{admin}},{{filtered_user}},{{filtered_orgs}}
{% endif %}

    labels:
    - traefik.enable=true
    - trafik.docker.network=web
    - traefik.http.routers.drone.entryPoints=web
    - traefik.http.routers.drone.rule=Host(`{{ url.split("/")[2] }}`)
    - "traefik.http.middlewares.drone-redirect.redirectregex.regex=^https?://${HOST}/(.*)"
    - "traefik.http.middlewares.drone-redirect.redirectregex.replacement=https://${HOST}/$${1}"
    - "traefik.http.routers.drone-ssl.middlewares=drone-redirect, drone-auth"
    - "traefik.http.routers.drone.middlewares=drone-redirect, drone-auth"
    - traefik.http.routers.drone-ssl.rule=host(`{{ url.split("/")[2] }}`)
    - traefik.http.routers.drone-ssl.tls.certResolver=leresolver
    networks:
    - web
    - dronet


  drone-runner:
    image: drone/drone-runner-docker
    restart: always
    depends_on:
      - drone
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    ports:
      - "3000"
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST='drone:80'
      - DRONE_RPC_SECRET={{ rpc_pass }}
      - DRONE_RUNNER_CAPACITY=10
    networks:
    - dronet
    - web

networks:
  web:
    external: true
